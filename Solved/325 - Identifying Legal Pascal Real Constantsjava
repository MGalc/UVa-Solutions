import java.io.OutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.regex.Matcher;
import java.util.StringTokenizer;
import java.io.IOException;
import java.util.regex.Pattern;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
    public static void main(String[] args) {
        InputStream inputStream = System.in;
        OutputStream outputStream = System.out;
        InputReader in = new InputReader(inputStream);
        PrintWriter out = new PrintWriter(outputStream);
        UVa325 solver = new UVa325();
        solver.solve(1, in, out);
        out.close();
    }

    static class UVa325 {
        public void solve(int testNumber, InputReader in, PrintWriter out) {
            String instr;

            instr = in.nextLine();
            while (!instr.equals("*")) {
                String trimmed = instr.trim();

                Pattern p = Pattern.compile("[-+]?\\d+((\\.\\d+)([eE][+-]?\\d+)?|([eE][+-]?\\d+))");
                Matcher m = p.matcher(trimmed);

                if (m.matches())
                    out.println(trimmed + " is legal.");
                else
                    out.println(trimmed + " is illegal.");

                instr = in.nextLine();
            }
        }

    }

    static class InputReader {
        public BufferedReader reader;
        public StringTokenizer tokenizer;

        public InputReader(InputStream stream) {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }

        public String nextLine() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    return reader.readLine();
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken("\n");
        }

    }
}

